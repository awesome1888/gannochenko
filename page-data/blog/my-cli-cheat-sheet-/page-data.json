{"componentChunkName":"component---src-components-blog-page-layout-blog-page-layout-tsx","path":"/blog/my-cli-cheat-sheet-","result":{"data":{"mdx":{"id":"ca5e63d0-82f2-5e4c-b8a4-1d59521b969a","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"My CLI cheat-sheet\",\n  \"description\": \"There are some things that can be useful to me, but I totally keep forgetting the syntax. And I am tired of googling this. Well, not any longer!\",\n  \"keywords\": \"git, bash, cli, cheatsheet, commands, console\",\n  \"path\": \"/blog/my-cli-cheat-sheet-\",\n  \"date\": \"2020-06-02T00:00:00.000Z\",\n  \"published\": true,\n  \"images\": [{\n    \"author\": \"David Travis\",\n    \"image\": \"./cover.jpg\",\n    \"sourceText\": \"Unsplash\",\n    \"source\": \"https://unsplash.com/@dtravisphd\",\n    \"is_cover\": 1,\n    \"galleryId\": 0\n  }]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Copyright = makeShortcode(\"Copyright\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"There are some things that can be useful to me, but I totally keep forgetting the syntax. And I am tired of googling this.\"), mdx(\"p\", null, \"Well, not any longer!\"), mdx(Align, {\n    mdxType: \"Align\"\n  }, mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"https://media.giphy.com/media/3orieVBTSQmG0HKJ6o/giphy.gif\",\n    \"alt\": \"Simpsons\",\n    \"title\": \"Logo Title Text 1\"\n  })), mdx(Copyright, {\n    source: \"https://giphy.com/gifs/season-17-the-simpsons-17x12-3orieVBTSQmG0HKJ6o\",\n    authorPrefix: \"Picture by\",\n    author: \"simpsonsworld.com\",\n    sourceText: \"Giphy\",\n    mdxType: \"Copyright\"\n  })), mdx(\"h2\", null, \"Git\"), mdx(\"h3\", null, \"History\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"# display branching tree\\ngit log --graph --full-history --all --pretty=format:\\\"%h%x09%d%x20%s\\\";\\ngit log --graph --decorate --oneline;\\n# display history of commits for a specific branch\\ngit log --walk-reflogs master;\\n# remove last commit locally\\ngit reset --hard HEAD~1\\n# un-stage all uncommitted changes\\ngit reset HEAD\\n# un-stage all uncommitted changes and erase them\\ngit reset HEAD --hard\\n# remove un-tracked files\\ngit clean -fd\\ngit clean -fX\\n\")), mdx(\"h3\", null, \"Work with tags\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"# get all remote tags\\ngit fetch --all --tags\\n# kill remote tag\\ngit push --delete origin v1.2.0\\n# kill local tag\\ngit tag -d v1.2.0\\n\")), mdx(\"h2\", null, \"Bash\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"# parametrized alias\\nalias dssh='function __sampleAlias(){ docker exec -it $1 /bin/bash; };__sampleAlias'\\n# launch chrome from the command line in Mac\\nalias chrome=\\\"/Applications/Google\\\\\\\\ \\\\\\\\Chrome.app/Contents/MacOS/Google\\\\\\\\ \\\\\\\\Chrome\\\"\\n# get console command by its PID\\nps -p [PID] -o args\\n# find where a binary is installed\\nwhich [CLI_COMMAND]\\n# list all files sorting by date, human readable size\\nls -ltah\\n# ... or reverse\\nls -ltahr\\n# ... or by size\\nls -lSah\\n# ... or by size reverse\\nls -lSahr\\n# copy a file from a remote host 123.123.123.123 over ssh working on port 55332\\nscp -P 55332 admin@123.123.123.123:/home/remote/path/to/file.gz ./\\n# zip a folder\\nzip -r folder.zip folder/\\n# get file info\\nfile ./file-name\\n\")), mdx(\"h2\", null, \"Yarn\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"# make a total package upgrade\\nyarn upgrade [package_name] --major\\n# find out why the package was installed\\nyarn why [package_name]\\n# get the latest version of a package that exists on NPM\\nyarn info [package_name] | grep version:\\n# install a package only for a current user\\nyarn global add [package_name] --prefix ~/.node\\n\")), mdx(\"h2\", null, \"Docker\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"# build an image\\ndocker build -t [vendor_name]/[image_name] .\\n# run an image\\ndocker run [vendor_name]/[image_name]\\n# run an image in daemon mode\\ndocker run -d [vendor_name]/[image_name]\\n# run an image of a web application interactively, and forward a port\\ndocker run -it -p [host_port]:[image_port] [vendor_name]/[image_name]\\n# \\\"ssh\\\" into a container with ID=[container_id]\\ndocker exec -it [container_id] bash\\n# see all running containers\\ndocker ps\\n# see logs of a container with ID=[container_id]\\ndocker logs [container_id]\\n# copy file \\\"config.txt\\\" into a container with ID=[container_id] into /root folder\\ndocker cp ./config.txt [container_id]:/root/\\n# remove all exited containers\\ndocker rm $(docker ps -a -f status=exited -q)\\n# remove all working containers\\ndocker rm $(docker ps -a -q)\\n# remove all images\\ndocker rmi $(docker images -a -q)\\n# remove volumes, networks\\ndocker system prune\\n\")), mdx(\"h2\", null, \"Kubernetes\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"# list pods\\nkubectl get pods\\n# exec a command on a pod\\nkubectl exec -it [pod_name] [cmd]\\n# get logs of a pod\\nkubectl logs [pod_name]\\n# delete a pod\\nkubectl delete pod [pod_name]\\n# apply a config file\\nkubectl apply -f [config_file]\\n# get information about a pod\\nkubectl describe pod [pod_name]\\n# list deployments\\nkubectl get deployments\\n# get information about a deployment\\nkubectl describe deployment [deployment_name]\\n# delete a deployment\\nkubectl delete deployment [deployment_name]\\n# apply rolling update on a deployment\\nkubectl rollout restart deployment [deployment_name]\\n# list all namespaces\\nkubectl get namespace\\n# list services in a particular namespace\\nkubectl get services -n [namespace]\\n# forward a port from a pod to the host\\nkubectl port-forward [pod_name] [host_port]:[container_port]\\n\")), mdx(\"h2\", null, \"Mongo\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"# dump a database (will create dump/[collections])\\nmongodump --db database_name\\n# import a database (will import all collections in dump/ folder)\\nmongorestore dump\\n\")), mdx(\"hr\", null));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"My CLI cheat-sheet","date":"2020-06-02T00:00:00.000Z","updatedAt":null,"keywords":"git, bash, cli, cheatsheet, commands, console","description":"There are some things that can be useful to me, but I totally keep forgetting the syntax. And I am tired of googling this. Well, not any longer!","published":true,"images":[{"image":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='267'%20viewBox='0%200%20400%20267'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%20134v133h113l-4-4-12-13c-22-24-46-49-60-66-8-9-9-14-5-17%202-1%204-3%204-5l5-4c1%200%203-1%203-4%202-4%201-3%2039-9a636%20636%200%2000101-22l29-8c51-14%2073-17%2087-11a768%20768%200%200185%2054l15%2010v7c0%205%200%206-2%206a5867%205867%200%2000-105-23l-44-7c-17-3-22-3-24-2s-3%201-11-1-9-3-11-1l-2%202%2019%206c2%200%201%205-1%207s-3%202-7%201l-11-1c0%201%202%202%205%202%204%201%205%201%204%202h-4v2l3%202%2012%203%2011%203%201%201c-1%201%200%201%202%201l13%203%203%201c4%200%2011%202%2011%203l2%201%208%202%2010%202%2015%203%204%201%209%201a183%20183%200%200027%206%205403%205403%200%200041%2011l4%201%2011%203%207%201v25l1-109V0H0v134m383-59a171%20171%200%2000-54%2017c-2%200-15%209-15%2010%201%203%2071%2050%2084%2057l2%201v-44l-1-44-16%203'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.497584541062802,"src":"/static/955a351a232c0885bab71b9070ba6c8d/77467/cover.jpg","srcSet":"/static/955a351a232c0885bab71b9070ba6c8d/dece2/cover.jpg 310w,\n/static/955a351a232c0885bab71b9070ba6c8d/fcb16/cover.jpg 620w,\n/static/955a351a232c0885bab71b9070ba6c8d/77467/cover.jpg 1240w,\n/static/955a351a232c0885bab71b9070ba6c8d/b1020/cover.jpg 1860w,\n/static/955a351a232c0885bab71b9070ba6c8d/88564/cover.jpg 2480w,\n/static/955a351a232c0885bab71b9070ba6c8d/fa19c/cover.jpg 4608w","sizes":"(max-width: 1240px) 100vw, 1240px"}}},"author":"David Travis","source":"https://unsplash.com/@dtravisphd","sourceText":"Unsplash","is_cover":1,"galleryId":0}]}}},"pageContext":{"id":"ca5e63d0-82f2-5e4c-b8a4-1d59521b969a"}},"staticQueryHashes":["1334184578","1334184578","2277278352","2277278352","400101895","400101895"]}