{"componentChunkName":"component---src-components-blog-page-layout-blog-page-layout-tsx","path":"/blog/how-to-deploy-an-application-to-heroku-using-docker","result":{"data":{"mdx":{"id":"a0554daf-23a8-5383-931c-4e9376a8e949","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to deploy an application to Heroku using Docker\",\n  \"description\": \"I am extremely fascinated with a container-based approach. I try to ship every application as a Docker container because in this case, the application becomes an infrastructure provider agnostic. So this time we will see how to deploy a dockerized application to Heroku — a famous cloud platform.\",\n  \"preview\": \"I am extremely fascinated with a container-based approach. I try to ship every application as a Docker container because in this case, the application becomes an infrastructure provider agnostic. So this time we will see how to deploy a dockerized application to Heroku — a famous cloud platform.\",\n  \"keywords\": \"docker, heroku, devops, containers, deployment\",\n  \"path\": \"/blog/how-to-deploy-an-application-to-heroku-using-docker\",\n  \"date\": \"2019-07-17T00:00:00.000Z\",\n  \"published\": true,\n  \"images\": [{\n    \"author\": \"Samuel Zeller\",\n    \"image\": \"/assets/blog/0_zFhwbx9V-B9SYkWG.jpg\",\n    \"sourceText\": \"Unsplash\",\n    \"source\": \"https://unsplash.com/@samuelzeller\",\n    \"is_cover\": 1,\n    \"galleryId\": 0\n  }]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Personally, I am extremely fascinated with a container-based approach. I try to ship every application as a Docker container because in this case, the application becomes an infrastructure provider agnostic. So this time we will see how to deploy a dockerized application to Heroku \\u2014 a famous cloud platform.\"), mdx(\"h2\", null, \"Step 1: The Code {a}\"), mdx(\"p\", null, \"My application\\u2019s code is as simple as 5 cents:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const express = require('express');\\n\\nconst app = express();\\n\\napp.get('/', (req, res) => {\\n    res.status(200).send('Hello');\\n});\\n\\nconst port = process.env.PORT || 3000;\\n\\napp.listen({ port }, () => {\\n    console.log(`\\uD83D\\uDE80 Application is ready at http://localhost:${port}`);\\n});\\n\")), mdx(\"p\", null, \"It is written in NodeJS, but it really does not matter, it could be anything else.\"), mdx(\"p\", null, \"\\u26A1 The first important thing: internally Heroku chooses a random port to hang the container on, so your application should look at \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"PORT\"), \" environment variable.\"), mdx(\"p\", null, \"Let's create a Dockerfile and put it next to the application:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-dockerfile\"\n  }, \"FROM node:11\\nRUN apt-get update && apt-get install -y --no-install-recommends vim && apt-get clean\\n\\nWORKDIR /app\\n\\nCOPY . .\\nRUN yarn\\n\\nENV NODE_ENV=production\\n\\nCMD [ \\\"yarn\\\", \\\"start\\\" ]\\n\")), mdx(\"p\", null, \"Just FYI, \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"package.json\"), \" looks like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"{\\n    \\\"name\\\": \\\"poc_docker-heroku\\\",\\n    \\\"version\\\": \\\"1.0.0\\\",\\n    \\\"description\\\": \\\"\\\",\\n    \\\"main\\\": \\\"index.js\\\",\\n    \\\"scripts\\\": {\\n        \\\"start\\\": \\\"node index.js\\\"\\n    },\\n    \\\"keywords\\\": [],\\n    \\\"author\\\": \\\"\\\",\\n    \\\"license\\\": \\\"UNLICENSED\\\",\\n    \\\"dependencies\\\": {\\n        \\\"express\\\": \\\"^4.17.1\\\"\\n    }\\n}\\n\")), mdx(\"h2\", null, \"Step 2: Authentication {a}\"), mdx(\"p\", null, \"From this moment on I assume that we have already signed up at heroku.com and created our application. Let's say, it will be my-first-unique-app (if this particular name was already taken, pick the other one). Heroku platform offers a really generous free plan which is more than enough not only for experimenting but for building an actual application that may go live.\"), mdx(\"p\", null, \"We are going to need for \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Heroku CLI tool\"), \". The easiest way to get it (from my perspective) is to install it with \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"curl\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"curl https://cli-assets.heroku.com/install.sh | sh;\\n\")), mdx(\"p\", null, \"Next thing: authenticate through the CLI tool in the interactive mode, using email and password you created while signing up at heroku.com:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"heroku login -i\\n\")), mdx(\"p\", null, \"This command will create a record in your ~/.netrc file.\"), mdx(\"p\", null, \"There are two ways of how to proceed further. Originally, Heroku was made with the idea of strong bonding between itself and GitHub, so they offer to build a Docker image on their side after we commit to the GitHub repository. Alternatively, we can build an image on our side and then just push it to their own Docker image repository.\"), mdx(\"p\", null, \"From my point of view, the second option gives more flexibility, so we will proceed this way.\"), mdx(\"h2\", null, \"Step 3: Deployment {a}\"), mdx(\"p\", null, \"Officially, we are supposed to run the following commands in order to build an image, and then push it to Heroku's own docker repository:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"heroku container:login;\\nheroku container:push web -a my-first-unique-app --context-path=./;\\n\")), mdx(\"p\", null, \"But, there are limitations (so far):\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"the second command should be executed in the same folder where Dockefile is located,\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"the file should be named as Dockerfile or Dockerfile.web, which is not cool in some situations.\")), mdx(\"p\", null, \"If we run the second command with a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-v\"), \" flag, we won't fail to notice, that this one is basically an alias for a sequence of docker commands. So, why don't we exploit an advantage of using flexible Docker CLI tool itself?\"), mdx(\"p\", null, \"First of all, we authenticate on Heroku's own repository with this superposition of commands:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"docker login --username=_ --password=`heroku auth:token 2> /dev/null` registry.heroku.com\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"heroku auth:token\"), \" command returns the current token we got with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"heroku login\"), \"\\xA0. Username \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_\"), \" should stay like this (weird, but true).\\nNow, we build an image:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"docker build -t registry.heroku.com/my-first-unique-app/web -f ./Dockerfile .\\n\")), mdx(\"p\", null, \"Here we are free to choose the Dockerfile to build from, as well as the build context and other options. The tag name should stay like this, there is no need to change it. The web code indicates that this particular container should be automatically exposed to the outer world through a technical domain.\\nHopefully, if the image is built with no errors, we can push it:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"docker push registry.heroku.com/my-first-unique-app/web\\n\")), mdx(\"p\", null, \"As soon as the image is there, we can finally put it live by calling\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"heroku container:release web -a my-first-unique-app\\n\")), mdx(\"p\", null, \"Let's give it some time to spin up and go have a coffee break. When we are back, visit \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://my-first-unique-app.herokuapp.com/\"\n  }, \"https://my-first-unique-app.herokuapp.com/\")), mdx(\"p\", null, \"Hopefully, we should see \\\"Hello\\\" message\\xA0:)\"), mdx(\"p\", null, \"Well, that is basically it. If something goes wrong, it is possible to view logs by typing\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"heroku logs --tail -a my-first-unique-app\\n\")), mdx(\"p\", null, \"As usual, here is a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/gannochenko/poc_docker-heroku\"\n  }, \"proof-of-concept repository\"), \" at your service. Enjoy!\"), mdx(\"p\", null, \"Useful links:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://devcenter.heroku.com/articles/heroku-cli-commands\"\n  }, \"https://devcenter.heroku.com/articles/heroku-cli-commands\"))), mdx(\"p\", null, \"Happy containering!\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"How to deploy an application to Heroku using Docker","date":"2019-07-17T00:00:00.000Z","updatedAt":null,"keywords":"docker, heroku, devops, containers, deployment","description":"I am extremely fascinated with a container-based approach. I try to ship every application as a Docker container because in this case, the application becomes an infrastructure provider agnostic. So this time we will see how to deploy a dockerized application to Heroku — a famous cloud platform.","published":true,"images":[{"image":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='267'%20viewBox='0%200%20400%20267'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%20100v100h11v-4l-1-4-2-1c0-2%201-2%204-2s4%200%204%202l4%201c3%200%204%200%204%202l4%201c4%200%204%200%204-3l1-3c1%200%207-5%207-7l4-1c4%200%204%200%204-2v-3h12l12-1%204-1%204-1%207-7%201-1c0-2%201-2%204-2s4%200%204%202l5-2c3-2%204-3%201-3s2-3%206-3l4-1%205-1%208-1%203-1h1c1-1%200-1-1-1-3%200-4-3-1-4l1-5%201-5%201-2c-1-2%202-3%204-1%203%202%2016%202%2018%200l4-2%204-1c2-1%202-1%200-2-3-1-3-5%202-5l3-2c1-4%201-5-2-5-2%200-3-2%200-3%204-2%209-1%209%202%200%201%200%202%201%201l2%201c1%201%202%201%202-1v-2l-1-2%201-2%202-1v-3h2c1%200%202%200%202-2h1c1%204%202%204%203%201l1-2%206-1c6-3%206-2%209%201s3%204%202%207%200%204%201%202c1-1%201-1%201%201-1%202%200%204%201%202%201-1%204%200%206%201l2-1%203-1%206%201c12%200%2014%201%2016%203l3%204c0%202%204%204%209%204l9%202%203%202%202-2%204-2%201-1%204-1%204%201%204%201%204-1%208-1h8v-4c0-5%200-6%204-3h5l5-1%202-1h20l4%201c0%202%205%204%2010%203l9%201%205%201c0-2%202-2%2016-2h16v39l1-60V0H0v100m0%201'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.497584541062802,"src":"/static/f1f4cc670bba3f0a897a0e724dbd90f0/77467/0_zFhwbx9V-B9SYkWG.jpg","srcSet":"/static/f1f4cc670bba3f0a897a0e724dbd90f0/dece2/0_zFhwbx9V-B9SYkWG.jpg 310w,\n/static/f1f4cc670bba3f0a897a0e724dbd90f0/fcb16/0_zFhwbx9V-B9SYkWG.jpg 620w,\n/static/f1f4cc670bba3f0a897a0e724dbd90f0/77467/0_zFhwbx9V-B9SYkWG.jpg 1240w,\n/static/f1f4cc670bba3f0a897a0e724dbd90f0/b1020/0_zFhwbx9V-B9SYkWG.jpg 1860w,\n/static/f1f4cc670bba3f0a897a0e724dbd90f0/88564/0_zFhwbx9V-B9SYkWG.jpg 2480w,\n/static/f1f4cc670bba3f0a897a0e724dbd90f0/de9c6/0_zFhwbx9V-B9SYkWG.jpg 4000w","sizes":"(max-width: 1240px) 100vw, 1240px"}}},"author":"Samuel Zeller","source":"https://unsplash.com/@samuelzeller","sourceText":"Unsplash","is_cover":1,"galleryId":0}]}}},"pageContext":{"id":"a0554daf-23a8-5383-931c-4e9376a8e949"}},"staticQueryHashes":["1334184578","1334184578","2277278352","2277278352","400101895","400101895"]}