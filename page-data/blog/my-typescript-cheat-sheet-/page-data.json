{"componentChunkName":"component---src-components-blog-page-layout-blog-page-layout-tsx","path":"/blog/my-typescript-cheat-sheet-","result":{"data":{"mdx":{"id":"7863e02c-7772-53ec-a53b-42fa7ffce52c","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"My TypeScript cheat-sheet\",\n  \"description\": \"In this article I will keep collecting all the tricks I have learned so far, as well as any cool projects I managed to find on the TypeScript topic.\",\n  \"keywords\": \"typescript, frontend, cheatsheet, javascript\",\n  \"path\": \"/blog/my-typescript-cheat-sheet-\",\n  \"date\": \"2020-06-04T00:00:00.000Z\",\n  \"published\": true,\n  \"images\": [{\n    \"author\": \"Web Donut\",\n    \"image\": \"./cover.jpg\",\n    \"sourceText\": \"Unsplash\",\n    \"source\": \"https://unsplash.com/@webdonut\",\n    \"is_cover\": 1\n  }]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"TypeScript became essential part of my professional activity.\\nIt got to the point that if I see pure \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"JavaScript\"), \" code, I simply can't acknowledge that.\\nI immediately start asking myself \\\"How is that possible for a language to not to have types?\\\".\"), mdx(\"p\", null, \"There are some tips and tricks I don't use quite often, so I decided to write down some notes, so I could always have them available.\"), mdx(\"h2\", null, \"Extend one complex type from another\"), mdx(\"p\", null, \"I am not a huge fan of interfaces and inheritance, since there is plenty of ways to create a derivative type, via \\\"union\\\" and a few extra tricks:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"type CarType = {\\n    speed: number;\\n    color: string;\\n    model: string;\\n};\\n\\n// Add a subset of properties from CarType\\ntype PlaneTypeA = { \\n    class: string\\n} & Pick<CarType, 'speed' | 'model'>;\\n\\n// Add one property from CarType\\ntype PlaneType = { \\n    class: string;\\n    speed: CarType[\\\"speed\\\"];\\n};\\n\\n// \\\"Inherit\\\" type\\ntype SuperCarType = {\\n    super: boolean;\\n} & CarType;\\n\")), mdx(\"h2\", null, \"Typing static class methods\"), mdx(\"p\", null, \"Not a huge sucker for OOP either, but occasionally I have to deal with it. So,\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"interface CommandProcessorInstance {}\\n\\nexport interface CommandProcessor {\\n    new (): CommandProcessorInstance;\\n    attach(program: CommanderCommand): void;\\n    process(args?: CommandActionArguments): Promise<void>;\\n}\\n\\nexport function Implements<T>() {\\n    return <U extends T>(constructor: U) => {\\n        // eslint-disable-next-line no-unused-expressions\\n        constructor;\\n    };\\n}\\n\\n@Implements<CommandProcessor>()\\nexport class CommandRun {\\n    public static attach(\\n        program: CommanderCommand,\\n    ) {\\n        // ...\\n    }\\n\\n    public static async process(\\n        args: CommandActionArguments,\\n    ) {\\n        // ...\\n    }\\n}\\n\")), mdx(\"h2\", null, \"Indexed vs Mapped Object vs Record\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"type MyMappedObjectType = {\\n    [k in string | number]: unknown;\\n};\\n\\ntype MyIndexedType = {\\n    [k: string]: unknown;\\n};\\n\\ntype MyRecord = Record<string, unknown>;\\n\")), mdx(\"h2\", null, \"Assign argument types\"), mdx(\"p\", null, \"If I have multiple functions of the same signature, I don't have to specify argument types every time. Instead, I make a type declaration once\\nand just assign it to many functions. TS is smart enough to figure argument types in this case.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"type SomeFunctionType = (foo: number, bar: string, baz: boolean) => void;\\n\\nconst funA: SomeFunctionType = (a, b, c) => { ... };\\nconst funB: SomeFunctionType = (a, b, c) => { ... };\\nconst funC: SomeFunctionType = (a, b, c) => { ... };\\n\")), mdx(\"h2\", null, \"Create types from types\"), mdx(\"p\", null, \"There is a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.typescriptlang.org/docs/handbook/2/types-from-types.html\"\n  }, \"nice article about that\"), \" (\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.typescriptlang.org/docs/handbook/advanced-types.html\"\n  }, \"old version\"), \").\"), mdx(\"h3\", null, \"Generics\"), mdx(\"p\", null, \"It is possible to use generics to make a dependency between types of function arguments:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"function pluck<T, K extends keyof T>(o: T, propertyNames: K[]): T[K][] {\\n    return propertyNames.map((n) => o[n]);\\n}\\n\")), mdx(\"h3\", null, \"Typeof\"), mdx(\"p\", null, \"Sometimes I can't import types from a third-party library, or I simply don't have types explicitly defined. Nevertheless, there is a way to declare a variable to be of the same type as the other variable:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"const data = [\\n    { name: 'Alex', position: 'pilot' },\\n    { name: 'Amos', position: 'tech' },\\n];\\n\\nconst crewMember: typeof data[0] | undefined;\\n\")), mdx(\"h3\", null, \"Pulling out the type of an element of an array\"), mdx(\"p\", null, \"Using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"typeof\"), \" + \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"infer\"), \" + \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"conditional\"), \" is ass-saving when it's too lazy to describe a type, or simply don't have access to library types.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"const data = [\\n    { name: 'Alex', position: 'pilot', customField: '1' },\\n    { name: 'Amos', position: 'tech', otherCustomField: true },\\n];\\n\\nconst ElementType = typeof data extends (infer U)[] ? U : unknown;\\n\")), mdx(\"hr\", null), mdx(\"p\", null, \"No rest for an engineer, so, yeh, to be continued...\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"My TypeScript cheat-sheet","date":"2020-06-04T00:00:00.000Z","updatedAt":null,"keywords":"typescript, frontend, cheatsheet, javascript","description":"In this article I will keep collecting all the tricks I have learned so far, as well as any cool projects I managed to find on the TypeScript topic.","published":true,"images":[{"image":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='267'%20viewBox='0%200%20400%20267'%20preserveAspectRatio='none'%3e%3cpath%20d='M175%2075c0%202%204%208%206%208l7%2011c0%203%200%203%202%202s2-1%201%201l-1%207-1%205-1%201-4%201c-7%201-12%205-7%205v1l-1%202-6%201-9%201c-2%201-5%202-6%201l-3%201-1%201-1-1c1-1%200-2-1-2-2-1%203-5%206-5s4-3%201-5l-2-4c0-1-6-5-9-5l-3%204-2%202h-2l-1-1c1-1-4-2-6-1s-2%201%200%203%203%205%202%206l-1-1h-1v2c-1%201-5-4-4-6l-1-2-2%201-2%201-5-1-4-1c-3-3-7-4-9-3h-1V91l-2-6-1%201-3%204c-2%202-2%202-1%204s0%206-1%206-2-2-1-9V80c1-4-3-5-5-3h-1l-2%202-1%203v-3c0-4-4-4-7-1-2%203%200%204%204%204h2l1%201%203-2c3%200%202%205-1%207-2%202-3%204-1%204%201%201%201%201%200%200l-4%204c-2%206%200%2010%204%2012l4%202%202%203%202%203c0%203%204%207%208%207l4%202c2%201%204%202%202%200v-3c1-2%201-2%201%200l1%203v2h2c0%202%2012%203%2017%201h5c-2%201-1%204%202%204l3%202c1%201%201%201-3%201s-6%200-10%203c-8%206-9%207-6%209%202%202%207%201%2015-3l6-3c2%202%202%205-1%206-8%203-16%2013-17%2022-1%2015%2015%2021%2030%2010l4-3%203-4%204-8c1-4%202-7%206-10%204-5%206-5%2010-3h2v-1l3-3c2-2%204-4%205-3l1-1%203-4c2-3%203-3%204-3%203%202%204-1%204-6-1-3-1-4%201-5v-3c0-1%200-3%202-5%203-4%203-5%200-6l-1-1c1-2%207%202%206%204v14c8%2012%2037%205%2044-11%206-15-11-24-29-16-3%202-6%203-8%202-3-1-2-2%204-4%2012-3%2017-6%2012-10-4-3-20%201-26%207-2%201-3%201-9-3-4-2-7-4-8-3-3%200-6-4-4-6%202-1%202-2%201-2l-2-2c-1-1-1-2-2-1-2%200-3-1-5-3l-3-1m67%2028c2%201%202%201%201%202h-9c-8%202-9%202-5%204l4%203%204%201%203%201v1c2%200%201%204-2%206l-3%203-4%202c-4%201-8%200-8-3l-1-3-2-2c0-1%200-2-2-2-1%200-2%200-3%203l-1%204h1l1%201%201%201%201%201c-2%203%2010%203%2017%200%208-3%2015-11%2015-16%200-4-4-8-7-8-2%200-2%200-1%201m-103%2054c-5%202-9%2010-8%2015l-1%202-1-2c-1-2-1-2-1%200%200%205%208%207%2015%205%203-2%203-2%201-2-3%200-6-3-6-5s0-2%202-1h1l3-2c3-2%204-5%202-5l-1%201-2%203c-3%202-6-5-3-8h3c2-2-1-3-4-1'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.497584541062802,"src":"/static/5cebde8ff470781d756f1518255cc377/77467/cover.jpg","srcSet":"/static/5cebde8ff470781d756f1518255cc377/dece2/cover.jpg 310w,\n/static/5cebde8ff470781d756f1518255cc377/fcb16/cover.jpg 620w,\n/static/5cebde8ff470781d756f1518255cc377/77467/cover.jpg 1240w,\n/static/5cebde8ff470781d756f1518255cc377/b1020/cover.jpg 1860w,\n/static/5cebde8ff470781d756f1518255cc377/1a900/cover.jpg 1920w","sizes":"(max-width: 1240px) 100vw, 1240px"}}},"author":"Web Donut","source":"https://unsplash.com/@webdonut","sourceText":"Unsplash","is_cover":1,"galleryId":null}]}}},"pageContext":{"id":"7863e02c-7772-53ec-a53b-42fa7ffce52c"}},"staticQueryHashes":["1334184578","1334184578","2277278352","2277278352","400101895","400101895"]}