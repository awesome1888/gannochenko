{"componentChunkName":"component---src-components-blog-page-layout-blog-page-layout-tsx","path":"/blog/how-to-calculate-actual-color-for-opacity-on-white-background","result":{"data":{"mdx":{"id":"2eb94b14-7a1c-5962-85e7-ed77ab50da36","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to calculate actual color for opacity on white background\",\n  \"description\": \"From time to time I observe designers making derivative colors by applying opacity to a base color against white background. While this approach works perfectly fine with wireframes, in the markup an element might not be always located on white. Therefore we need to know exact hex value to make use of it.\",\n  \"keywords\": \"math, color, design, markup, css\",\n  \"path\": \"/blog/how-to-calculate-actual-color-for-opacity-on-white-background\",\n  \"date\": \"2020-05-14T00:00:00.000Z\",\n  \"published\": true,\n  \"images\": [{\n    \"author\": \"Crissy Jarvis\",\n    \"image\": \"/assets/blog/covers/how-to-calculate-opacity-color.jpg\",\n    \"sourceText\": \"Unsplash\",\n    \"source\": \"https://unsplash.com/@crissyjarvis\",\n    \"is_cover\": 1,\n    \"galleryId\": 0\n  }]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"From time to time I observe designers making derivative colors by applying opacity to a base color against white background. While this approach works perfectly on the design stage, in production an element might not be always located on white. Therefore we need to know exact value to make use of it.\"), mdx(\"p\", null, \"One way to do this is to use a screen color picker like ColorPick Eyedropper. But sometimes it is interesting to know how to make it \\\"by hands\\\". This is how to do that.\"), mdx(\"p\", null, \"Let's take a red color as an example: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"#c31528\"), \": \", mdx(Color, {\n    color: \"#c31528\",\n    mdxType: \"Color\"\n  }), mdx(\"br\", null), \"To make a dirty pale pink color, we can use opacity: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"opacity(#c31528, 0.3)\"), \": \", mdx(Color, {\n    color: \"rgb(195, 21, 40, 0.3)\",\n    mdxType: \"Color\"\n  })), mdx(\"p\", null, \"If we put this color over something else than white, the color will be different: \", mdx(Color, {\n    color: \"#00ff00\",\n    mdxType: \"Color\"\n  }), mdx(Color, {\n    color: \"rgb(195, 21, 40, 0.3)\",\n    marginLeft: \"-10px\",\n    mdxType: \"Color\"\n  })), mdx(\"p\", null, \"To get the real color we can use the formula:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"getResultColor(baseColor, opacity) => baseColor * opacity + white * (1 - opacity)\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"baseColor\"), \" is our color: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"#C31528\")), mdx(\"p\", null, \"Let's apply this formula to each byte of the color vector:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"#C31528 = rgb(195, 21, 40).\\n195 => getResultColor(195, 0.3) = 195 * 0.3 + 255 * (1 - 0.3) = 237\\n 21 => getResultColor(21, 0.3) = 21 * 0.3 + 255 * (1 - 0.3) = 184.8\\n 40 => getResultColor(40, 0.3) = 40 * 0.3 + 255 * (1 - 0.3) = 190.5\\nresult = rgb(237, foor(184.8), floor(190.5)) = #EDB8BE\\n\")), mdx(\"p\", null, \"The result color is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"#EDB8BE\"), \": \", mdx(Color, {\n    color: \"#EDB8BE\",\n    mdxType: \"Color\"\n  }), \", looks the same as before: \", mdx(Color, {\n    color: \"rgb(195, 21, 40, 0.3)\",\n    mdxType: \"Color\"\n  })), mdx(\"p\", null, \"But against green background it works absolutely correct: \", mdx(Color, {\n    color: \"#00ff00\",\n    mdxType: \"Color\"\n  }), mdx(Color, {\n    color: \"#EDB8BE\",\n    marginLeft: \"-10px\",\n    mdxType: \"Color\"\n  })), mdx(\"p\", null, \"This calculator may help us to find out right value for every base color and opacity:\"), mdx(Container, {\n    mdxType: \"Container\"\n  }, mdx(Calculator, {\n    mdxType: \"Calculator\"\n  })), mdx(\"hr\", null), mdx(\"p\", null, \"Hooray, now we know how this works!\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"How to calculate actual color for opacity on white background","date":"2020-05-14T00:00:00.000Z","updatedAt":null,"keywords":"math, color, design, markup, css","description":"From time to time I observe designers making derivative colors by applying opacity to a base color against white background. While this approach works perfectly fine with wireframes, in the markup an element might not be always located on white. Therefore we need to know exact hex value to make use of it.","published":true,"images":[{"image":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='266'%20viewBox='0%200%20400%20266'%20preserveAspectRatio='none'%3e%3cpath%20d='M132%2067v48a2831%202831%200%2001-2%20125c-3%201-3%202-3%206-1%206-1%206%208%206h7v-5l-1-6c-1-1-2-2-1-4l-1-4-2-2-1-3c-2-1-2-3-2-10%200-5%200-8%201-7%201%204%201%202%201-3l1-6v-27c-1-3%200-4%201-4v-22a65%2065%200%20000-20%201356%201356%200%2001-2-62c0-2-3-2-4%200m131%201l-1%209c0%2010%206%209-59%209l-5%201c-1%202-6%202-30%202l-29%201h26c29%200%2034%200%2034%203s3%205%205%203h38l8%201%203-1h5c3%200%203%200%203%203s-1%204-3%204l-3%201c-1%201-1%200-2-1v-2h2l-6-1h-11c-2%201-7%201-9-1l-4%201h-24l-4%201c-2-1-3%200-5%201l-27%201h-26l23%201%2026%201c3%200%204%200%204%203l1%203h12c12%200%2017%200%2014%202h-28c-2-1-5%200-5%202s-5%202-26%202h-20l23%201c22%200%2023%200%2023%202%200%203%202%203%2011%204h19l7-1h2l3%201h16c1%201%204%200%204-3%201-2%202-2%208-2%205%200%205%201%205%207l-1%205h-9l-9-1c0-2-4-3-5-2h-2l-28-1c-24%200-26%201-27%202-1%202-3%202-21%202-13%200-20%200-19%201l20%201h20v3a446%20446%200%200142%202h5a97%2097%200%200010%200c3%200%205-2%205-4s1-2%208-2c11%200%2011%200%2010%206%200%207-1%207-15%207-8%200-9%200-9-2-1-2-4-3-6-1h-1l-4-1a238%20238%200%2001-15%200h-32c-1-1-2-1-4%201s-3%202-18%202h-17l13%201c18%200%2021%201%2021%204%200%202%201%203%204%203h25a2591%202591%200%200125%200h5c3%200%203%200%204-3v-3h24v13h-6l-6%201h12v11l-36%201-3-3-6-1h-49l-4%201c0%202-3%202-11%202-14%200-15%201-1%202%2011%200%2012%201%2012%203s3%203%205%202h53l1-3v-2h20l20%201v5c0%206%201%206-25%206-17%200-20-1-22-2-1-1-3-2-7-2h-34l-13%201h-1c-2-2-5-1-6%201s-2%202-8%202l-6%201%207%201c6%200%207%200%207%202%200%203%202%204%205%203h6c1-2%202-2%203%200h44c1%202%204-1%204-4v-2h19l23%201h4v6l-1%205a546%20546%200%2001-52%200c0-2-3-3-5-2h-14c-2-1-41-1-42%201%200%202-7%201-7-1-1-1-1%200-1%202s0%203%204%203c3%200%203%200%204%202s1%202%2010%203h10a394%20394%200%200038%200c3%200%203%200%203-2v-3h26c22-1%2027-1%2028%201v2l1%205v4h-11l-12%201h12c8%200%2012%200%2011%201v2l-1%202c0%202-2%203-5%203a1308%201308%200%2001-104-3%20216%20216%200%200041%200h3c2%202%204%200%204-3%201-3%201-3%206-3l6-1h-6c-4%200-5%200-6-2-1-1-3-2-31-2-29%201-30%200-30-1l-2%204v8c1-1%201%200%201%202v4h89l35%201%201%203-1%205v4c1%201%201%202-1%203l-1%206c1%205%201%206%2011%205%205-1%205-1%205-5s-2-7-4-7c-3%200-7-3-5-4v-6a1402%201402%200%20010-163c-3-2-5-1-5%201m-8%2039c1%203-1%204-17%204l-16%201c-1%201%201%202%203%201h16c5%200%206%200%207%202s2%202%207%202h6v-6c0-5-1-6-3-6-3%200-3%200-3%202m-84%2048l-4%202-14%201h-13l12%201h13l1%203%201%203h21l17%201%203-1h15c2%201%204%200%205-3l2-3v-1l-3-2c-1-2-2-2-3-1h-53'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.5048543689320388,"src":"/static/c92d63a0362dc2a0939c4f277bd34f62/77467/how-to-calculate-opacity-color.jpg","srcSet":"/static/c92d63a0362dc2a0939c4f277bd34f62/dece2/how-to-calculate-opacity-color.jpg 310w,\n/static/c92d63a0362dc2a0939c4f277bd34f62/fcb16/how-to-calculate-opacity-color.jpg 620w,\n/static/c92d63a0362dc2a0939c4f277bd34f62/77467/how-to-calculate-opacity-color.jpg 1240w,\n/static/c92d63a0362dc2a0939c4f277bd34f62/b1020/how-to-calculate-opacity-color.jpg 1860w,\n/static/c92d63a0362dc2a0939c4f277bd34f62/88564/how-to-calculate-opacity-color.jpg 2480w,\n/static/c92d63a0362dc2a0939c4f277bd34f62/2f195/how-to-calculate-opacity-color.jpg 4288w","sizes":"(max-width: 1240px) 100vw, 1240px"}}},"author":"Crissy Jarvis","source":"https://unsplash.com/@crissyjarvis","sourceText":"Unsplash","is_cover":1,"galleryId":0}]}}},"pageContext":{"id":"2eb94b14-7a1c-5962-85e7-ed77ab50da36"}},"staticQueryHashes":["1334184578","1334184578","2277278352","2277278352","400101895","400101895"]}