{"version":3,"sources":["webpack:///./src/pages/techradar.mdx","webpack:///./src/components/LayoutInner/style.ts","webpack:///./src/components/LayoutInner/LayoutInner.tsx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","list","isMDXComponent","Body","styled","div","BackLink","Link","theme","fontSize","small","LayoutInner","children","location","pathname","pageContext","frontmatter","title","backUrl","keywords","description","show_title","images","showTitle","displayTitle","coverImage","coverImageData","find","image","is_cover","childImageSharp","fluid","src","type","Typography","main","to"],"mappings":"oQAUaA,EAAe,GACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,cAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,wCACA,wMACA,cAAC,IAAD,CAAWA,QAAQ,aACnB,cAAC,IAAD,CAAQC,KAAK,4HAA4HD,QAAQ,YAEjJ,0CACA,+OACA,cAAC,IAAD,CAAWA,QAAQ,aACnB,cAAC,IAAD,CAAQC,KAAK,kIAAkID,QAAQ,YAEvJ,yCACA,yOACA,cAAC,IAAD,CAAWA,QAAQ,aACnB,cAAC,IAAD,CAAQC,KAAK,8DAA8DD,QAAQ,YAEnF,yBACA,0BAKJH,EAAWK,gBAAiB,G,qHCzCfC,EAAOC,IAAOC,IAAV,kEAAGD,CAAH,kBAIJE,EAAWF,YAAOG,QAAV,sEAAGH,CAAH,yCAEJ,SAAAL,GAAK,OAAIA,EAAMS,MAAMC,SAASC,S,wBCDlCC,EAAwC,SAAAZ,GAAS,IAEtDa,EAcAb,EAdAa,SAFsD,EAgBtDb,EAbAc,SAHsD,gBAGxB,GAHwB,GAG1CC,gBAH0C,MAG/B,GAH+B,IAgBtDf,EAZAgB,YACIC,YALkD,gBAa9C,GAb8C,GAM9CC,aAN8C,MAMtC,GANsC,MAO9CC,eAP8C,MAOpC,GAPoC,MAQ9CC,gBAR8C,MAQnC,GARmC,MAS9CC,mBAT8C,MAShC,GATgC,MAW9CC,kBAX8C,MAWjC,EAXiC,MAY9CC,cAZ8C,MAYrC,GAZqC,EAetDC,EACAxB,EADAwB,UAIEC,EACFP,KAFwB,MAAbH,KAEuB,IAAdS,GAAsC,IAAfF,EAE3CI,EAAa,GACjB,GAAIH,EAAQ,CACR,IAAMI,EAAiBJ,EAAOK,MAAK,SAACC,GAAD,OAAgBA,EAAMC,YACrDH,GAAkBA,EAAeE,QACG,iBAAzBF,EAAeE,MACtBH,EAAaC,EAAeE,MACrBF,EAAeE,MAAME,kBAC5BL,EAAaC,EAAeE,MAAME,gBAAgBC,MAAMC,MAKpE,OACI,oCACI,kBAAC,IAAD,CACIf,MAAOA,EACPE,SAAUA,EACVC,YAAaA,EACbQ,MAAOH,GAA0B,uBAEpCD,GACG,kBAAC,IAAD,CAAWS,KAAK,YACZ,kBAACC,EAAA,EAAD,CAAYC,MAAI,GAAElB,IAG1B,kBAACd,EAAD,KACKS,IACEM,GAAW,kBAACZ,EAAD,CAAU8B,GAAIlB,GAAd,gBAMfP","file":"component---src-pages-techradar-mdx-11eb349cf70e5604d971.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/gannochenko.dev/gannochenko.dev/src/components/LayoutInner/LayoutInner.tsx\";\nimport { Container } from '../../src/components/Container';\nimport { Skills } from '../../src/components/Skills';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h2>{`Primary tech`}</h2>\n    <p>{`So, I would say I am a front-end first fullstack engineer. Thereby, my primary tech skills are all pretty much around the React ecosystem. This is what I use on daily basis:`}</p>\n    <Container mdxType=\"Container\">\n    <Skills list=\"reactjs,typescript,css,javascript,html,apollo,gatsbyjs,mobx,reactquery,styledcomponents,git,vercel,nodejs,docker,jamstack\" mdxType=\"Skills\" />\n    </Container>\n    <h2>{`Secondary tech`}</h2>\n    <p>{`Among of my secondaries there is stuff that I don't really use, like, every day of my life. However, I believe to have good knowledge of, or that knowledge may be rusty but still good to go after some picking up.`}</p>\n    <Container mdxType=\"Container\">\n    <Skills list=\"terraform,kubernetes,serverless,aws,expressjs,nestjs,mongodb,mysql,postgressql,redis,typeorm,linux,sass,less,redux,saga,vagrant\" mdxType=\"Skills\" />\n    </Container>\n    <h2>{`Familiar with`}</h2>\n    <p>{`Everything listed here I either touched once or twice in my life, or worked a lot in the distant past. I can do something relatively basic having a good official reference or a bunch of examples by my side.`}</p>\n    <Container mdxType=\"Container\">\n    <Skills list=\"auth0,netlify,meteorjs,php,angular,perl,sharp,python,kotlin\" mdxType=\"Skills\" />\n    </Container>\n    <br />\n    <br />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import styled from 'styled-components';\nimport { Link } from 'gatsby';\n\nexport const Body = styled.div`\n    flex-grow: 2;\n`;\n\nexport const BackLink = styled(Link)`\n    text-decoration: none;\n    font-size: ${props => props.theme.fontSize.small};\n`;\n","/* eslint-disable @typescript-eslint/camelcase */\n\nimport React, { FunctionComponent } from 'react';\nimport { Body, BackLink } from './style';\nimport { Props } from './type';\nimport { Container, SEO } from '../';\nimport { Typography } from '../Typography';\n\nexport const LayoutInner: FunctionComponent<Props> = props => {\n    const {\n        children,\n        location: { pathname = '' } = {},\n        pageContext: {\n            frontmatter: {\n                title = '',\n                backUrl = '',\n                keywords = [],\n                description = '',\n                // eslint-disable-next-line @typescript-eslint/camelcase\n                show_title = 1,\n                images = [],\n            } = {},\n        },\n        showTitle,\n    } = props;\n\n    const isRoot = pathname === '/';\n    const displayTitle =\n        title && !isRoot && showTitle !== false && show_title !== 0;\n\n    let coverImage = '';\n    if (images) {\n        const coverImageData = images.find((image: any) => image.is_cover);\n        if (coverImageData && coverImageData.image) {\n            if (typeof coverImageData.image === 'string') {\n                coverImage = coverImageData.image;\n            } else if (coverImageData.image.childImageSharp) {\n                coverImage = coverImageData.image.childImageSharp.fluid.src;\n            }\n        }\n    }\n\n    return (\n        <>\n            <SEO\n                title={title}\n                keywords={keywords}\n                description={description}\n                image={coverImage ? coverImage : '/assets/avatar.jpg'}\n            />\n            {displayTitle && (\n                <Container type=\"standard\">\n                    <Typography main>{title}</Typography>\n                </Container>\n            )}\n            <Body>\n                {children}\n                {!!backUrl && <BackLink to={backUrl}>&larr; Go back</BackLink>}\n            </Body>\n        </>\n    );\n};\n\nexport default LayoutInner;\n"],"sourceRoot":""}