{"version":3,"sources":["webpack:///./src/pages/shit.mdx","webpack:///./src/components/ProjectCard/style.ts","webpack:///./src/components/ProjectCard/ProjectCard.tsx","webpack:///./src/components/ProjectList/style.ts","webpack:///./src/components/ProjectList/ProjectList.tsx","webpack:///./src/components/LayoutInner/style.ts","webpack:///./src/components/LayoutInner/LayoutInner.tsx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","isMDXComponent","ProjectCardRoot","styled","div","Image","Img","Data","LinkContainer","align","ViewPost","Link","Title","Typography","attrs","h2","theme","fontSize","standard","util","media","TitleLink","GatsbyLink","Date","small","ProjectCard","data","image","useMemo","frontmatter","images","find","is_cover","url","path","released","to","sizes","childImageSharp","fluid","title","getYear","date","ProjectListRoot","Items","grid","gutters","all","Item","cell","lg","md","sm","xs","ProjectList","showLink","map","item","key","node","id","Body","BackLink","LayoutInner","children","location","pathname","pageContext","backUrl","keywords","description","show_title","showTitle","displayTitle","coverImage","coverImageData","src","type","main"],"mappings":"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","file":"component---src-pages-shit-mdx-5526a23c6e4c13a56043.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/gannochenko.dev/gannochenko.dev/src/components/LayoutInner/LayoutInner.tsx\";\nimport { graphql } from 'gatsby';\nimport { Container } from '../components/Container';\nimport { ProjectList } from '../components/ProjectList';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Container mdxType=\"Container\">\n    1<br />\n    1<br />\n    1<br />\n    1<br />\n    1<br />\n    </Container>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import styled from 'styled-components';\nimport Img from 'gatsby-image';\n\nimport { Link } from '../Link';\nimport { Link as GatsbyLink } from 'gatsby';\nimport { align } from '@gannochenko/etc';\nimport { Typography } from '../Typography';\n\nexport const ProjectCardRoot = styled.div`\n    box-shadow: 0px 6px 16px 0px rgba(0, 0, 0, 0.1);\n    border-radius: 2px;\n    overflow: hidden;\n\n    transition: transform ease 200ms;\n    &:hover {\n        transform: translateY(-3px);\n    }\n`;\n\nexport const Image = styled(Img)`\n    background-color: #c4c4c4;\n    max-height: 10rem;\n`;\n\nexport const Data = styled.div`\n    padding: 1rem;\n`;\n\nexport const LinkContainer = styled.div`\n    ${align('center', 'right')};\n    justify-content: space-between;\n`;\n\nexport const ViewPost = styled(Link)`\n    text-align: right;\n`;\n\nexport const Title = styled(Typography).attrs({ h2: true })`\n    margin: 0 0 0.5rem 0;\n    min-height: 4rem;\n    font-size: ${({ theme }) => theme.fontSize.standard};\n    ${({ theme }) =>\n        theme.util.media({\n            '<md': 'min-height: 5rem;',\n        })}\n`;\n\nexport const TitleLink = styled(GatsbyLink)`\n    color: inherit;\n    &:focus,\n    &:active,\n    &:visited,\n    &:hover {\n        color: inherit;\n    }\n    text-decoration: none;\n`;\n\nexport const Date = styled.div`\n    font-size: ${({ theme }) => theme.fontSize.small};\n`;\n","import React, { FunctionComponent, useMemo } from 'react';\n\nimport {\n    ProjectCardRoot,\n    Image,\n    Data,\n    LinkContainer,\n    ViewPost,\n    Title,\n    Date,\n    TitleLink,\n} from './style';\nimport { Props } from './type';\nimport { getYear } from '../../lib/util';\nimport { Link } from 'gatsby';\n\nexport const ProjectCard: FunctionComponent<Props> = ({ data }) => {\n    const image = useMemo(() => {\n        return (\n            data.frontmatter.images.find((image: any) => image.is_cover) || {}\n        );\n    }, [data]);\n\n    const { path: url, released } = data.frontmatter;\n\n    return (\n        <ProjectCardRoot>\n            <Link to={url}>\n                <Image sizes={image.image.childImageSharp.fluid} />\n            </Link>\n            <Data>\n                <Title>\n                    <TitleLink to={url}>{data.frontmatter.title}</TitleLink>\n                </Title>\n                <LinkContainer>\n                    <Date>\n                        {released === false ? 'Was supposed to be' : 'First'}{' '}\n                        released in {getYear(data.frontmatter.date)}\n                    </Date>\n                    <ViewPost to={url} fontSize=\"small\">\n                        View details\n                    </ViewPost>\n                </LinkContainer>\n            </Data>\n        </ProjectCardRoot>\n    );\n};\n","import styled from 'styled-components';\n\nexport const ProjectListRoot = styled.div`\n    padding-bottom: 5rem;\n`;\n\nexport const Items = styled.div`\n    display: flex;\n    flex-wrap: wrap;\n    ${({ theme }) => theme.util.grid({ gutters: { all: '1rem' } })};\n`;\n\nexport const Item = styled.div`\n    ${({ theme }) => theme.util.cell({ lg: 4, md: 6, sm: 12, xs: 12 })}\n`;\n\nexport const LinkContainer = styled.div`\n    margin-top: 2rem;\n`;\n","import React, { FunctionComponent } from 'react';\n\nimport { ProjectCard } from '../ProjectCard';\nimport { ProjectListRoot, Items, Item, LinkContainer } from './style';\nimport { Props } from './type';\nimport { Link } from '../Link';\n\nexport const ProjectList: FunctionComponent<Props> = ({ data, showLink }) => {\n    return (\n        <ProjectListRoot>\n            <Items>\n                {data.map(item => (\n                    <Item key={item.node.id}>\n                        <ProjectCard data={item.node} />\n                    </Item>\n                ))}\n            </Items>\n            {!!showLink && (\n                <LinkContainer>\n                    <Link to=\"/projects\">See all projects &rarr;</Link>\n                </LinkContainer>\n            )}\n        </ProjectListRoot>\n    );\n};\n","import styled from 'styled-components';\nimport { Link } from 'gatsby';\n\nexport const Body = styled.div`\n    flex-grow: 2;\n`;\n\nexport const BackLink = styled(Link)`\n    text-decoration: none;\n    font-size: ${props => props.theme.fontSize.small};\n`;\n","/* eslint-disable @typescript-eslint/camelcase */\n\nimport React, { FunctionComponent } from 'react';\nimport { Body, BackLink } from './style';\nimport { Props } from './type';\nimport { Container, SEO } from '../';\nimport { Typography } from '../Typography';\n\nexport const LayoutInner: FunctionComponent<Props> = props => {\n    const {\n        children,\n        location: { pathname = '' } = {},\n        pageContext: {\n            frontmatter: {\n                title = '',\n                backUrl = '',\n                keywords = [],\n                description = '',\n                // eslint-disable-next-line @typescript-eslint/camelcase\n                show_title = 1,\n                images = [],\n            } = {},\n        },\n        showTitle,\n    } = props;\n\n    const isRoot = pathname === '/';\n    const displayTitle =\n        title && !isRoot && showTitle !== false && show_title !== 0;\n\n    let coverImage = '';\n    if (images) {\n        const coverImageData = images.find((image: any) => image.is_cover);\n        if (coverImageData && coverImageData.image) {\n            if (typeof coverImageData.image === 'string') {\n                coverImage = coverImageData.image;\n            } else if (coverImageData.image.childImageSharp) {\n                coverImage = coverImageData.image.childImageSharp.fluid.src;\n            }\n        }\n    }\n\n    return (\n        <>\n            <SEO\n                title={title}\n                keywords={keywords}\n                description={description}\n                image={coverImage ? coverImage : '/assets/avatar.jpg'}\n            />\n            {displayTitle && (\n                <Container type=\"standard\">\n                    <Typography main>{title}</Typography>\n                </Container>\n            )}\n            <Body>\n                {children}\n                {!!backUrl && <BackLink to={backUrl}>&larr; Go back</BackLink>}\n            </Body>\n        </>\n    );\n};\n\nexport default LayoutInner;\n"],"sourceRoot":""}